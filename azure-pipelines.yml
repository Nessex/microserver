# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:
  - job: Linux
    displayName: Linux build
    pool:
      vmImage: 'Ubuntu 16.04' # other options: 'macOS 10.13', 'VS2017-Win2016'

    steps:
      - script: curl https://sh.rustup.rs -sSf | sh -s -- -y
        displayName: 'Install rust'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          rustup install nightly
          rustup default nightly
        displayName: 'Setting nightly'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          rustup component add rustfmt-preview
          rustup component add clippy-preview --toolchain=nightly
        displayName: 'installing Cargo components'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          cargo fmt --all -- --check
        displayName: 'Cargo fmt'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          cargo clippy --all -- -D clippy::pedantic -A clippy::non-ascii-literal
        displayName: 'Cargo clippy'

      # - script: |
      #     export PATH=$HOME/.cargo/bin:$PATH
      #     cargo build --release
      #   displayName: 'Build'

      # - task: PublishBuildArtifacts@1
      #   displayName: 'Publish Artifact: microserver'
      #   inputs:
      #     PathtoPublish: '$(Build.ArtifactStagingDirectory)/target/release/microserver'
      #     ArtifactName: microserver
  - job: macOS
    displayName: OSX build
    pool:
      vmImage: 'macOS-10.13'
    steps:
      - script: curl https://sh.rustup.rs -sSf | sh -s -- -y
        displayName: 'Installing rust'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          rustup install nightly
          rustup default nightly
        displayName: 'Setting nightly'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          rustup component add rustfmt-preview
          rustup component add clippy-preview --toolchain=nightly
        displayName: 'installing Cargo components'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          cargo fmt --all -- --check
        displayName: 'Cargo fmt'

      - script: |
          export PATH=$HOME/.cargo/bin:$PATH
          cargo clippy --all -- -D clippy::pedantic -A clippy::non-ascii-literal
        displayName: 'Cargo clippy'
  
  - job: Windows
    displayName: Windows build
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - powershell: |
        echo $Env:PATH
        echo $Env:USERPROFILE
    - powershell: |
        Invoke-WebRequest -Uri https://win.rustup.rs/ -Outfile rustup-init.exe
        .\rustup-init.exe -y
      displayName: 'Installing rust'

    - powershell: |
        $Env:PATH = $Env:PATH+$Env:USERPROFILE+'\.cargo\bin;'
        ls $Env:USERPROFILE\.cargo\bin
        $rustup = $Env:USERPROFILE+'\.cargo\bin\rustup.exe'
        Start-Process -NoNewWindow -FilePath $rustup -ArgumentList 'install nightly'
        Start-Process -NoNewWindow -FilePath $rustup -ArgumentList 'default nightly'
        # rustup install nightly
        # rustup default nightly
      displayName: 'Setting nightly'

    - powershell: |
        $rustup = $Env:USERPROFILE+'\.cargo\bin\rustup.exe'
        Start-Process -NoNewWindow -FilePath $rustup -ArgumentList 'component add rustfmt-preview'
        Start-Process -NoNewWindow -FilePath $rustup -ArgumentList 'component add clippy-preview --toolchain=nightly'
        # $Env:PATH = $Env:PATH+$Env:USERPROFILE+'\.cargo\bin;'
        # rustup component add rustfmt-preview
        # rustup component add clippy-preview --toolchain=nightly
      displayName: 'installing Cargo components'

    - powershell: |
        $cargo = $Env:USERPROFILE+'\.cargo\bin\cargo.exe'
        Start-Process -NoNewWindow -FilePath $cargo -ArgumentList 'fmt --all -- --check'
        # $Env:PATH = $Env:PATH+$Env:USERPROFILE+'\.cargo\bin;'
        # cargo fmt --all -- --check
      displayName: 'Cargo fmt'

    - powershell: |
        $cargo = $Env:USERPROFILE+'\.cargo\bin\cargo.exe'
        Start-Process -NoNewWindow -FilePath $cargo -ArgumentList ' clippy --all -- -D clippy::pedantic -A clippy::non-ascii-literal'
        # $Env:PATH = $Env:PATH+$Env:USERPROFILE+'\.cargo\bin;'
        # cargo clippy --all -- -D clippy::pedantic -A clippy::non-ascii-literal
      displayName: 'Cargo clippy'
